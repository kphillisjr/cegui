// This file has been generated by Py++.

#include "boost/python.hpp"
#include "python_CEGUI.h"
#include "BasicImage.pypp.hpp"

namespace bp = boost::python;

struct BasicImage_wrapper : CEGUI::BasicImage, bp::wrapper< CEGUI::BasicImage > {

    BasicImage_wrapper(CEGUI::BasicImage const & arg )
    : CEGUI::BasicImage( arg )
      , bp::wrapper< CEGUI::BasicImage >(){
        // copy constructor
        
    }

    BasicImage_wrapper(::CEGUI::String const & name )
    : CEGUI::BasicImage( boost::ref(name) )
      , bp::wrapper< CEGUI::BasicImage >(){
        // constructor
    
    }

    BasicImage_wrapper(::CEGUI::String const & name, ::CEGUI::Texture * texture, ::CEGUI::Rect< float > const & tex_area, ::CEGUI::Vector2< float > const & offset, bool const autoscaled, ::CEGUI::Size< float > const & native_res )
    : CEGUI::BasicImage( boost::ref(name), boost::python::ptr(texture), boost::ref(tex_area), boost::ref(offset), autoscaled, boost::ref(native_res) )
      , bp::wrapper< CEGUI::BasicImage >(){
        // constructor
    
    }

    virtual void notifyDisplaySizeChanged( ::CEGUI::Size< float > const & size ) {
        if( bp::override func_notifyDisplaySizeChanged = this->get_override( "notifyDisplaySizeChanged" ) )
            func_notifyDisplaySizeChanged( boost::ref(size) );
        else{
            this->CEGUI::BasicImage::notifyDisplaySizeChanged( boost::ref(size) );
        }
    }
    
    void default_notifyDisplaySizeChanged( ::CEGUI::Size< float > const & size ) {
        CEGUI::BasicImage::notifyDisplaySizeChanged( boost::ref(size) );
    }

    virtual void render( ::CEGUI::GeometryBuffer & buffer, ::CEGUI::Rect< float > const & dest_area, ::CEGUI::Rect< float > const * clip_area, ::CEGUI::ColourRect const & colours ) const  {
        if( bp::override func_render = this->get_override( "render" ) )
            func_render( boost::ref(buffer), boost::ref(dest_area), boost::python::ptr(clip_area), boost::ref(colours) );
        else{
            this->CEGUI::BasicImage::render( boost::ref(buffer), boost::ref(dest_area), boost::python::ptr(clip_area), boost::ref(colours) );
        }
    }
    
    void default_render( ::CEGUI::GeometryBuffer & buffer, ::CEGUI::Rect< float > const & dest_area, ::CEGUI::Rect< float > const * clip_area, ::CEGUI::ColourRect const & colours ) const  {
        CEGUI::BasicImage::render( boost::ref(buffer), boost::ref(dest_area), boost::python::ptr(clip_area), boost::ref(colours) );
    }

};

void register_BasicImage_class(){

    { //::CEGUI::BasicImage
        typedef bp::class_< BasicImage_wrapper, bp::bases< CEGUI::Image > > BasicImage_exposer_t;
        BasicImage_exposer_t BasicImage_exposer = BasicImage_exposer_t( "BasicImage", bp::init< CEGUI::String const & >(( bp::arg("name") )) );
        bp::scope BasicImage_scope( BasicImage_exposer );
        bp::implicitly_convertible< CEGUI::String const &, CEGUI::BasicImage >();
        BasicImage_exposer.def( bp::init< CEGUI::String const &, CEGUI::Texture *, CEGUI::Rect< float > const &, CEGUI::Vector2< float > const &, bool, CEGUI::Size< float > const & >(( bp::arg("name"), bp::arg("texture"), bp::arg("tex_area"), bp::arg("offset"), bp::arg("autoscaled"), bp::arg("native_res") )) );
        { //::CEGUI::BasicImage::clone
        
            typedef ::CEGUI::Image & ( ::CEGUI::BasicImage::*clone_function_type )(  ) const;
            
            BasicImage_exposer.def( 
                "clone"
                , clone_function_type(&::CEGUI::BasicImage::clone)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CEGUI::BasicImage::getName
        
            typedef ::CEGUI::String const & ( ::CEGUI::BasicImage::*getName_function_type )(  ) const;
            
            BasicImage_exposer.def( 
                "getName"
                , getName_function_type(&::CEGUI::BasicImage::getName)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CEGUI::BasicImage::getRenderedOffset
        
            typedef ::CEGUI::Vector2< float > const & ( ::CEGUI::BasicImage::*getRenderedOffset_function_type )(  ) const;
            
            BasicImage_exposer.def( 
                "getRenderedOffset"
                , getRenderedOffset_function_type(&::CEGUI::BasicImage::getRenderedOffset)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CEGUI::BasicImage::getRenderedSize
        
            typedef ::CEGUI::Size< float > const & ( ::CEGUI::BasicImage::*getRenderedSize_function_type )(  ) const;
            
            BasicImage_exposer.def( 
                "getRenderedSize"
                , getRenderedSize_function_type(&::CEGUI::BasicImage::getRenderedSize)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CEGUI::BasicImage::notifyDisplaySizeChanged
        
            typedef void ( ::CEGUI::BasicImage::*notifyDisplaySizeChanged_function_type )( ::CEGUI::Size< float > const & ) ;
            typedef void ( BasicImage_wrapper::*default_notifyDisplaySizeChanged_function_type )( ::CEGUI::Size< float > const & ) ;
            
            BasicImage_exposer.def( 
                "notifyDisplaySizeChanged"
                , notifyDisplaySizeChanged_function_type(&::CEGUI::BasicImage::notifyDisplaySizeChanged)
                , default_notifyDisplaySizeChanged_function_type(&BasicImage_wrapper::default_notifyDisplaySizeChanged)
                , ( bp::arg("size") ) );
        
        }
        { //::CEGUI::BasicImage::render
        
            typedef void ( ::CEGUI::BasicImage::*render_function_type )( ::CEGUI::GeometryBuffer &,::CEGUI::Rect< float > const &,::CEGUI::Rect< float > const *,::CEGUI::ColourRect const & ) const;
            typedef void ( BasicImage_wrapper::*default_render_function_type )( ::CEGUI::GeometryBuffer &,::CEGUI::Rect< float > const &,::CEGUI::Rect< float > const *,::CEGUI::ColourRect const & ) const;
            
            BasicImage_exposer.def( 
                "render"
                , render_function_type(&::CEGUI::BasicImage::render)
                , default_render_function_type(&BasicImage_wrapper::default_render)
                , ( bp::arg("buffer"), bp::arg("dest_area"), bp::arg("clip_area"), bp::arg("colours") ) );
        
        }
        { //::CEGUI::BasicImage::setArea
        
            typedef void ( ::CEGUI::BasicImage::*setArea_function_type )( ::CEGUI::Rect< float > const & ) ;
            
            BasicImage_exposer.def( 
                "setArea"
                , setArea_function_type( &::CEGUI::BasicImage::setArea )
                , ( bp::arg("pixel_area") ) );
        
        }
        { //::CEGUI::BasicImage::setAutoScaled
        
            typedef void ( ::CEGUI::BasicImage::*setAutoScaled_function_type )( bool const ) ;
            
            BasicImage_exposer.def( 
                "setAutoScaled"
                , setAutoScaled_function_type( &::CEGUI::BasicImage::setAutoScaled )
                , ( bp::arg("autoscaled") ) );
        
        }
        { //::CEGUI::BasicImage::setNativeResolution
        
            typedef void ( ::CEGUI::BasicImage::*setNativeResolution_function_type )( ::CEGUI::Size< float > const & ) ;
            
            BasicImage_exposer.def( 
                "setNativeResolution"
                , setNativeResolution_function_type( &::CEGUI::BasicImage::setNativeResolution )
                , ( bp::arg("native_res") ) );
        
        }
        { //::CEGUI::BasicImage::setOffset
        
            typedef void ( ::CEGUI::BasicImage::*setOffset_function_type )( ::CEGUI::Vector2< float > const & ) ;
            
            BasicImage_exposer.def( 
                "setOffset"
                , setOffset_function_type( &::CEGUI::BasicImage::setOffset )
                , ( bp::arg("pixel_offset") ) );
        
        }
        { //::CEGUI::BasicImage::setTexture
        
            typedef void ( ::CEGUI::BasicImage::*setTexture_function_type )( ::CEGUI::Texture * ) ;
            
            BasicImage_exposer.def( 
                "setTexture"
                , setTexture_function_type( &::CEGUI::BasicImage::setTexture )
                , ( bp::arg("texture") ) );
        
        }
    }

}
