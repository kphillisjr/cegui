// This file has been generated by Py++.

#include "boost/python.hpp"
#include "python_CEGUI.h"
#include "Vector3f.pypp.hpp"

namespace bp = boost::python;

void register_Vector3f_class(){

    { //::CEGUI::Vector3< float >
        typedef bp::class_< CEGUI::Vector3< float > > Vector3f_exposer_t;
        Vector3f_exposer_t Vector3f_exposer = Vector3f_exposer_t( "Vector3f", bp::init< >() );
        bp::scope Vector3f_scope( Vector3f_exposer );
        Vector3f_exposer.def( bp::init< float const &, float const &, float const & >(( bp::arg("x"), bp::arg("y"), bp::arg("z") )) );
        Vector3f_exposer.def( bp::init< CEGUI::Vector2< float > const &, float const & >(( bp::arg("v"), bp::arg("z") )) );
        Vector3f_exposer.def( bp::init< CEGUI::Vector3< float > const & >(( bp::arg("v") )) );
        Vector3f_exposer.def( bp::self != bp::self );
        Vector3f_exposer.def( bp::self * bp::other< float >() );
        Vector3f_exposer.def( bp::self + bp::self );
        Vector3f_exposer.def( bp::self - bp::self );
        Vector3f_exposer.def( bp::self == bp::self );
        Vector3f_exposer.def_readwrite( "d_x", &CEGUI::Vector3< float >::d_x );
        Vector3f_exposer.def_readwrite( "d_y", &CEGUI::Vector3< float >::d_y );
        Vector3f_exposer.def_readwrite( "d_z", &CEGUI::Vector3< float >::d_z );
    }

}
