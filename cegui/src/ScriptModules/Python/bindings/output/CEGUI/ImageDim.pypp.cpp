// This file has been generated by Py++.

#include "boost/python.hpp"
#include "python_CEGUI.h"
#include "ImageDim.pypp.hpp"

namespace bp = boost::python;

struct ImageDim_wrapper : CEGUI::ImageDim, bp::wrapper< CEGUI::ImageDim > {

    ImageDim_wrapper(CEGUI::ImageDim const & arg )
    : CEGUI::ImageDim( arg )
      , bp::wrapper< CEGUI::ImageDim >(){
        // copy constructor
        
    }

    ImageDim_wrapper( )
    : CEGUI::ImageDim( )
      , bp::wrapper< CEGUI::ImageDim >(){
        // null constructor
    
    }

    ImageDim_wrapper(::CEGUI::String const & name, ::CEGUI::DimensionType dim )
    : CEGUI::ImageDim( boost::ref(name), dim )
      , bp::wrapper< CEGUI::ImageDim >(){
        // constructor
    
    }

    virtual ::CEGUI::BaseDim * clone_impl(  ) const {
        if( bp::override func_clone_impl = this->get_override( "clone_impl" ) )
            return func_clone_impl(  );
        else{
            return this->CEGUI::ImageDim::clone_impl(  );
        }
    }
    
    virtual ::CEGUI::BaseDim * default_clone_impl(  ) const {
        return CEGUI::ImageDim::clone_impl( );
    }

    virtual float getValue_impl( ::CEGUI::Window const & wnd ) const {
        if( bp::override func_getValue_impl = this->get_override( "getValue_impl" ) )
            return func_getValue_impl( boost::ref(wnd) );
        else{
            return this->CEGUI::ImageDim::getValue_impl( boost::ref(wnd) );
        }
    }
    
    virtual float default_getValue_impl( ::CEGUI::Window const & wnd ) const {
        return CEGUI::ImageDim::getValue_impl( boost::ref(wnd) );
    }

    virtual float getValue_impl( ::CEGUI::Window const & wnd, ::CEGUI::Rectf const & container ) const {
        if( bp::override func_getValue_impl = this->get_override( "getValue_impl" ) )
            return func_getValue_impl( boost::ref(wnd), boost::ref(container) );
        else{
            return this->CEGUI::ImageDim::getValue_impl( boost::ref(wnd), boost::ref(container) );
        }
    }
    
    virtual float default_getValue_impl( ::CEGUI::Window const & wnd, ::CEGUI::Rectf const & container ) const {
        return CEGUI::ImageDim::getValue_impl( boost::ref(wnd), boost::ref(container) );
    }

    virtual void writeXMLElementAttributes_impl( ::CEGUI::XMLSerializer & xml_stream ) const {
        if( bp::override func_writeXMLElementAttributes_impl = this->get_override( "writeXMLElementAttributes_impl" ) )
            func_writeXMLElementAttributes_impl( boost::ref(xml_stream) );
        else{
            this->CEGUI::ImageDim::writeXMLElementAttributes_impl( boost::ref(xml_stream) );
        }
    }
    
    virtual void default_writeXMLElementAttributes_impl( ::CEGUI::XMLSerializer & xml_stream ) const {
        CEGUI::ImageDim::writeXMLElementAttributes_impl( boost::ref(xml_stream) );
    }

    virtual void writeXMLElementName_impl( ::CEGUI::XMLSerializer & xml_stream ) const {
        if( bp::override func_writeXMLElementName_impl = this->get_override( "writeXMLElementName_impl" ) )
            func_writeXMLElementName_impl( boost::ref(xml_stream) );
        else{
            this->CEGUI::ImageDim::writeXMLElementName_impl( boost::ref(xml_stream) );
        }
    }
    
    virtual void default_writeXMLElementName_impl( ::CEGUI::XMLSerializer & xml_stream ) const {
        CEGUI::ImageDim::writeXMLElementName_impl( boost::ref(xml_stream) );
    }

    virtual bool handleFontRenderSizeChange( ::CEGUI::Window & window, ::CEGUI::Font const * font ) const  {
        if( bp::override func_handleFontRenderSizeChange = this->get_override( "handleFontRenderSizeChange" ) )
            return func_handleFontRenderSizeChange( boost::ref(window), boost::python::ptr(font) );
        else{
            return this->CEGUI::BaseDim::handleFontRenderSizeChange( boost::ref(window), boost::python::ptr(font) );
        }
    }
    
    bool default_handleFontRenderSizeChange( ::CEGUI::Window & window, ::CEGUI::Font const * font ) const  {
        return CEGUI::BaseDim::handleFontRenderSizeChange( boost::ref(window), boost::python::ptr(font) );
    }

};

void register_ImageDim_class(){

    { //::CEGUI::ImageDim
        typedef bp::class_< ImageDim_wrapper, bp::bases< CEGUI::BaseDim > > ImageDim_exposer_t;
        ImageDim_exposer_t ImageDim_exposer = ImageDim_exposer_t( "ImageDim", "*!\n\
        \n\
            Dimension type that represents some dimension of a named Image.  Implements BaseDim interface.\n\
        *\n", bp::init< >() );
        bp::scope ImageDim_scope( ImageDim_exposer );
        ImageDim_exposer.def( bp::init< CEGUI::String const &, CEGUI::DimensionType >(( bp::arg("name"), bp::arg("dim") ), "*!\n\
                \n\
                    Constructor.\n\
        \n\
                @param name\n\
                    String object holding the name of the image.\n\
        \n\
                @param dim\n\
                    DimensionType value indicating which dimension of the described image that this\
                    ImageDim\n\
                    is to represent.\n\
                *\n") );
        { //::CEGUI::ImageDim::clone_impl
        
            typedef ::CEGUI::BaseDim * ( ImageDim_wrapper::*clone_impl_function_type )(  ) const;
            
            ImageDim_exposer.def( 
                "clone_impl"
                , clone_impl_function_type( &ImageDim_wrapper::default_clone_impl )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CEGUI::ImageDim::getSourceDimension
        
            typedef ::CEGUI::DimensionType ( ::CEGUI::ImageDim::*getSourceDimension_function_type )(  ) const;
            
            ImageDim_exposer.def( 
                "getSourceDimension"
                , getSourceDimension_function_type( &::CEGUI::ImageDim::getSourceDimension )
                , "*!\n\
                    \n\
                        Gets the source dimension type for this WidgetDim.\n\
            \n\
                    @return\n\
                        DimensionType value indicating which dimension of the described image that this\
                        WidgetDim\n\
                        is to represent.\n\
                    *\n" );
        
        }
        { //::CEGUI::ImageDim::getSourceImage
        
            typedef ::CEGUI::String const & ( ::CEGUI::ImageDim::*getSourceImage_function_type )(  ) const;
            
            ImageDim_exposer.def( 
                "getSourceImage"
                , getSourceImage_function_type( &::CEGUI::ImageDim::getSourceImage )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "*!\n\
                    \n\
                        Gets the source image information for this ImageDim.\n\
            \n\
                    @return\n\
                        String object holding the name of the image.\n\
                    *\n" );
        
        }
        { //::CEGUI::ImageDim::getValue_impl
        
            typedef float ( ImageDim_wrapper::*getValue_impl_function_type )( ::CEGUI::Window const & ) const;
            
            ImageDim_exposer.def( 
                "getValue_impl"
                , getValue_impl_function_type( &ImageDim_wrapper::default_getValue_impl )
                , ( bp::arg("wnd") )
                , "Implementation of the base class interface\n" );
        
        }
        { //::CEGUI::ImageDim::getValue_impl
        
            typedef float ( ImageDim_wrapper::*getValue_impl_function_type )( ::CEGUI::Window const &,::CEGUI::Rectf const & ) const;
            
            ImageDim_exposer.def( 
                "getValue_impl"
                , getValue_impl_function_type( &ImageDim_wrapper::default_getValue_impl )
                , ( bp::arg("wnd"), bp::arg("container") )
                , "Implementation of the base class interface\n" );
        
        }
        { //::CEGUI::ImageDim::setSourceDimension
        
            typedef void ( ::CEGUI::ImageDim::*setSourceDimension_function_type )( ::CEGUI::DimensionType ) ;
            
            ImageDim_exposer.def( 
                "setSourceDimension"
                , setSourceDimension_function_type( &::CEGUI::ImageDim::setSourceDimension )
                , ( bp::arg("dim") )
                , "*!\n\
                    \n\
                        Sets the source dimension type for this ImageDim.\n\
            \n\
                    @param dim\n\
                        DimensionType value indicating which dimension of the described image that this\
                        ImageDim\n\
                        is to represent.\n\
            \n\
                    @return\n\
                        Nothing.\n\
                    *\n" );
        
        }
        { //::CEGUI::ImageDim::setSourceImage
        
            typedef void ( ::CEGUI::ImageDim::*setSourceImage_function_type )( ::CEGUI::String const & ) ;
            
            ImageDim_exposer.def( 
                "setSourceImage"
                , setSourceImage_function_type( &::CEGUI::ImageDim::setSourceImage )
                , ( bp::arg("name") )
                , "*!\n\
                    \n\
                        Sets the source image information for this ImageDim.\n\
            \n\
                    @param name\n\
                        String object holding the name of the image.\n\
            \n\
                    @return\n\
                        Nothing.\n\
                    *\n" );
        
        }
        { //::CEGUI::ImageDim::writeXMLElementAttributes_impl
        
            typedef void ( ImageDim_wrapper::*writeXMLElementAttributes_impl_function_type )( ::CEGUI::XMLSerializer & ) const;
            
            ImageDim_exposer.def( 
                "writeXMLElementAttributes_impl"
                , writeXMLElementAttributes_impl_function_type( &ImageDim_wrapper::default_writeXMLElementAttributes_impl )
                , ( bp::arg("xml_stream") ) );
        
        }
        { //::CEGUI::ImageDim::writeXMLElementName_impl
        
            typedef void ( ImageDim_wrapper::*writeXMLElementName_impl_function_type )( ::CEGUI::XMLSerializer & ) const;
            
            ImageDim_exposer.def( 
                "writeXMLElementName_impl"
                , writeXMLElementName_impl_function_type( &ImageDim_wrapper::default_writeXMLElementName_impl )
                , ( bp::arg("xml_stream") ) );
        
        }
        { //::CEGUI::BaseDim::handleFontRenderSizeChange
        
            typedef bool ( ::CEGUI::BaseDim::*handleFontRenderSizeChange_function_type )( ::CEGUI::Window &,::CEGUI::Font const * ) const;
            typedef bool ( ImageDim_wrapper::*default_handleFontRenderSizeChange_function_type )( ::CEGUI::Window &,::CEGUI::Font const * ) const;
            
            ImageDim_exposer.def( 
                "handleFontRenderSizeChange"
                , handleFontRenderSizeChange_function_type(&::CEGUI::BaseDim::handleFontRenderSizeChange)
                , default_handleFontRenderSizeChange_function_type(&ImageDim_wrapper::default_handleFontRenderSizeChange)
                , ( bp::arg("window"), bp::arg("font") ) );
        
        }
    }

}
