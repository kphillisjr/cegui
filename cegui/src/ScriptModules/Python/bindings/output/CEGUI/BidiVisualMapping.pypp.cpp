// This file has been generated by Py++.

#include "boost/python.hpp"
#include "python_CEGUI.h"
#include "BidiVisualMapping.pypp.hpp"

namespace bp = boost::python;

struct BidiVisualMapping_wrapper : CEGUI::BidiVisualMapping, bp::wrapper< CEGUI::BidiVisualMapping > {

    BidiVisualMapping_wrapper()
    : CEGUI::BidiVisualMapping()
      , bp::wrapper< CEGUI::BidiVisualMapping >(){
        // null constructor
        
    }

    virtual ::CEGUI::BidiCharType getBidiCharType( ::CEGUI::utf32 const char_to_check ) const {
        bp::override func_getBidiCharType = this->get_override( "getBidiCharType" );
        return func_getBidiCharType( char_to_check );
    }

    virtual bool reorderFromLogicalToVisual( ::CEGUI::String const & logical, ::CEGUI::String & visual, ::std::vector< int > & l2v, ::std::vector< int > & v2l ) const {
        bp::override func_reorderFromLogicalToVisual = this->get_override( "reorderFromLogicalToVisual" );
        return func_reorderFromLogicalToVisual( boost::ref(logical), boost::ref(visual), boost::ref(l2v), boost::ref(v2l) );
    }

};

void register_BidiVisualMapping_class(){

    { //::CEGUI::BidiVisualMapping
        typedef bp::class_< BidiVisualMapping_wrapper, boost::noncopyable > BidiVisualMapping_exposer_t;
        BidiVisualMapping_exposer_t BidiVisualMapping_exposer = BidiVisualMapping_exposer_t( "BidiVisualMapping" );
        bp::scope BidiVisualMapping_scope( BidiVisualMapping_exposer );
        { //::CEGUI::BidiVisualMapping::getBidiCharType
        
            typedef ::CEGUI::BidiCharType ( ::CEGUI::BidiVisualMapping::*getBidiCharType_function_type )( ::CEGUI::utf32 const ) const;
            
            BidiVisualMapping_exposer.def( 
                "getBidiCharType"
                , bp::pure_virtual( getBidiCharType_function_type(&::CEGUI::BidiVisualMapping::getBidiCharType) )
                , ( bp::arg("char_to_check") )
                , "*!\n\
                \n\
                    Gets the Bidi char type of a char.\n\
            \n\
                @param charToCheck\n\
                    The utf32 character code that will be checked.\n\
            \n\
                @return\n\
                    One of the BidiCharType enumerated values indicating the Bidi char type.\n\
                *\n" );
        
        }
        { //::CEGUI::BidiVisualMapping::getL2vMapping
        
            typedef ::std::vector< int > const ( ::CEGUI::BidiVisualMapping::*getL2vMapping_function_type )(  ) const;
            
            BidiVisualMapping_exposer.def( 
                "getL2vMapping"
                , getL2vMapping_function_type( &::CEGUI::BidiVisualMapping::getL2vMapping ) );
        
        }
        { //::CEGUI::BidiVisualMapping::getTextVisual
        
            typedef ::CEGUI::String const & ( ::CEGUI::BidiVisualMapping::*getTextVisual_function_type )(  ) const;
            
            BidiVisualMapping_exposer.def( 
                "getTextVisual"
                , getTextVisual_function_type( &::CEGUI::BidiVisualMapping::getTextVisual )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CEGUI::BidiVisualMapping::getV2lMapping
        
            typedef ::std::vector< int > const ( ::CEGUI::BidiVisualMapping::*getV2lMapping_function_type )(  ) const;
            
            BidiVisualMapping_exposer.def( 
                "getV2lMapping"
                , getV2lMapping_function_type( &::CEGUI::BidiVisualMapping::getV2lMapping ) );
        
        }
        { //::CEGUI::BidiVisualMapping::reorderFromLogicalToVisual
        
            typedef bool ( ::CEGUI::BidiVisualMapping::*reorderFromLogicalToVisual_function_type )( ::CEGUI::String const &,::CEGUI::String &,::std::vector<int, std::allocator<int> > &,::std::vector<int, std::allocator<int> > & ) const;
            
            BidiVisualMapping_exposer.def( 
                "reorderFromLogicalToVisual"
                , bp::pure_virtual( reorderFromLogicalToVisual_function_type(&::CEGUI::BidiVisualMapping::reorderFromLogicalToVisual) )
                , ( bp::arg("logical"), bp::arg("visual"), bp::arg("l2v"), bp::arg("v2l") ) );
        
        }
        { //::CEGUI::BidiVisualMapping::updateVisual
        
            typedef bool ( ::CEGUI::BidiVisualMapping::*updateVisual_function_type )( ::CEGUI::String const & ) ;
            
            BidiVisualMapping_exposer.def( 
                "updateVisual"
                , updateVisual_function_type( &::CEGUI::BidiVisualMapping::updateVisual )
                , ( bp::arg("logical") )
                , "*!\n\
                \n\
                    Use reorderFromLogicalToVisual to update the internal visual mapping\n\
                    data and visual string representation based upon the logical string\n\
                     logical.\n\
            \n\
                @param logical\n\
                    String object representing the logical text order.\n\
            \n\
                @return\n\
                    - true if the update was a success.\n\
                    - false if something went wrong.\n\
                *\n" );
        
        }
    }

}
