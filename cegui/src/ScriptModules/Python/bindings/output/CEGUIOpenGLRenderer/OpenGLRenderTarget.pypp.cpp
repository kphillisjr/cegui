// This file has been generated by Py++.

#include "boost/python.hpp"
#include "python_CEGUIOpenGLRenderer.h"
#include "OpenGLRenderTarget.pypp.hpp"

namespace bp = boost::python;

struct OpenGLRenderTarget_wrapper : CEGUI::OpenGLRenderTarget, bp::wrapper< CEGUI::OpenGLRenderTarget > {

    OpenGLRenderTarget_wrapper(::CEGUI::OpenGLRenderer & owner )
    : CEGUI::OpenGLRenderTarget( boost::ref(owner) )
      , bp::wrapper< CEGUI::OpenGLRenderTarget >(){
        // constructor
    
    }

    virtual void activate(  ) {
        if( bp::override func_activate = this->get_override( "activate" ) )
            func_activate(  );
        else{
            this->CEGUI::OpenGLRenderTarget::activate(  );
        }
    }
    
    void default_activate(  ) {
        CEGUI::OpenGLRenderTarget::activate( );
    }

    virtual void deactivate(  ) {
        if( bp::override func_deactivate = this->get_override( "deactivate" ) )
            func_deactivate(  );
        else{
            this->CEGUI::OpenGLRenderTarget::deactivate(  );
        }
    }
    
    void default_deactivate(  ) {
        CEGUI::OpenGLRenderTarget::deactivate( );
    }

    virtual void draw( ::CEGUI::GeometryBuffer const & buffer ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw( boost::ref(buffer) );
        else{
            this->CEGUI::OpenGLRenderTarget::draw( boost::ref(buffer) );
        }
    }
    
    void default_draw( ::CEGUI::GeometryBuffer const & buffer ) {
        CEGUI::OpenGLRenderTarget::draw( boost::ref(buffer) );
    }

    virtual void draw( ::CEGUI::RenderQueue const & queue ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw( boost::ref(queue) );
        else{
            this->CEGUI::OpenGLRenderTarget::draw( boost::ref(queue) );
        }
    }
    
    void default_draw( ::CEGUI::RenderQueue const & queue ) {
        CEGUI::OpenGLRenderTarget::draw( boost::ref(queue) );
    }

    virtual void setArea( ::CEGUI::Rectf const & area ) {
        if( bp::override func_setArea = this->get_override( "setArea" ) )
            func_setArea( boost::ref(area) );
        else{
            this->CEGUI::OpenGLRenderTarget::setArea( boost::ref(area) );
        }
    }
    
    void default_setArea( ::CEGUI::Rectf const & area ) {
        CEGUI::OpenGLRenderTarget::setArea( boost::ref(area) );
    }

    virtual void unprojectPoint( ::CEGUI::GeometryBuffer const & buff, ::CEGUI::Vector2f const & p_in, ::CEGUI::Vector2f & p_out ) const  {
        if( bp::override func_unprojectPoint = this->get_override( "unprojectPoint" ) )
            func_unprojectPoint( boost::ref(buff), boost::ref(p_in), boost::ref(p_out) );
        else{
            this->CEGUI::OpenGLRenderTarget::unprojectPoint( boost::ref(buff), boost::ref(p_in), boost::ref(p_out) );
        }
    }
    
    void default_unprojectPoint( ::CEGUI::GeometryBuffer const & buff, ::CEGUI::Vector2f const & p_in, ::CEGUI::Vector2f & p_out ) const  {
        CEGUI::OpenGLRenderTarget::unprojectPoint( boost::ref(buff), boost::ref(p_in), boost::ref(p_out) );
    }

    virtual void updateMatrix(  ) const {
        if( bp::override func_updateMatrix = this->get_override( "updateMatrix" ) )
            func_updateMatrix(  );
        else{
            this->CEGUI::OpenGLRenderTarget::updateMatrix(  );
        }
    }
    
    virtual void default_updateMatrix(  ) const {
        CEGUI::OpenGLRenderTarget::updateMatrix( );
    }

    virtual bool isImageryCache(  ) const {
        bp::override func_isImageryCache = this->get_override( "isImageryCache" );
        return func_isImageryCache(  );
    }

};

void register_OpenGLRenderTarget_class(){

    { //::CEGUI::OpenGLRenderTarget
        typedef bp::class_< OpenGLRenderTarget_wrapper, bp::bases< ::CEGUI::RenderTarget >, boost::noncopyable > OpenGLRenderTarget_exposer_t;
        OpenGLRenderTarget_exposer_t OpenGLRenderTarget_exposer = OpenGLRenderTarget_exposer_t( "OpenGLRenderTarget", "*!\n\
        \n\
            Intermediate OpenGL implementation of a RenderTarget.\n\
        *\n", bp::init< CEGUI::OpenGLRenderer & >(( bp::arg("owner") ), "! Constructor\n") );
        bp::scope OpenGLRenderTarget_scope( OpenGLRenderTarget_exposer );
        { //::CEGUI::OpenGLRenderTarget::activate
        
            typedef void ( ::CEGUI::OpenGLRenderTarget::*activate_function_type )(  ) ;
            typedef void ( OpenGLRenderTarget_wrapper::*default_activate_function_type )(  ) ;
            
            OpenGLRenderTarget_exposer.def( 
                "activate"
                , activate_function_type(&::CEGUI::OpenGLRenderTarget::activate)
                , default_activate_function_type(&OpenGLRenderTarget_wrapper::default_activate) );
        
        }
        { //::CEGUI::OpenGLRenderTarget::deactivate
        
            typedef void ( ::CEGUI::OpenGLRenderTarget::*deactivate_function_type )(  ) ;
            typedef void ( OpenGLRenderTarget_wrapper::*default_deactivate_function_type )(  ) ;
            
            OpenGLRenderTarget_exposer.def( 
                "deactivate"
                , deactivate_function_type(&::CEGUI::OpenGLRenderTarget::deactivate)
                , default_deactivate_function_type(&OpenGLRenderTarget_wrapper::default_deactivate) );
        
        }
        { //::CEGUI::OpenGLRenderTarget::draw
        
            typedef void ( ::CEGUI::OpenGLRenderTarget::*draw_function_type )( ::CEGUI::GeometryBuffer const & ) ;
            typedef void ( OpenGLRenderTarget_wrapper::*default_draw_function_type )( ::CEGUI::GeometryBuffer const & ) ;
            
            OpenGLRenderTarget_exposer.def( 
                "draw"
                , draw_function_type(&::CEGUI::OpenGLRenderTarget::draw)
                , default_draw_function_type(&OpenGLRenderTarget_wrapper::default_draw)
                , ( bp::arg("buffer") ) );
        
        }
        { //::CEGUI::OpenGLRenderTarget::draw
        
            typedef void ( ::CEGUI::OpenGLRenderTarget::*draw_function_type )( ::CEGUI::RenderQueue const & ) ;
            typedef void ( OpenGLRenderTarget_wrapper::*default_draw_function_type )( ::CEGUI::RenderQueue const & ) ;
            
            OpenGLRenderTarget_exposer.def( 
                "draw"
                , draw_function_type(&::CEGUI::OpenGLRenderTarget::draw)
                , default_draw_function_type(&OpenGLRenderTarget_wrapper::default_draw)
                , ( bp::arg("queue") ) );
        
        }
        { //::CEGUI::OpenGLRenderTarget::getArea
        
            typedef ::CEGUI::Rectf const & ( ::CEGUI::OpenGLRenderTarget::*getArea_function_type )(  ) const;
            
            OpenGLRenderTarget_exposer.def( 
                "getArea"
                , getArea_function_type(&::CEGUI::OpenGLRenderTarget::getArea)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CEGUI::OpenGLRenderTarget::setArea
        
            typedef void ( ::CEGUI::OpenGLRenderTarget::*setArea_function_type )( ::CEGUI::Rectf const & ) ;
            typedef void ( OpenGLRenderTarget_wrapper::*default_setArea_function_type )( ::CEGUI::Rectf const & ) ;
            
            OpenGLRenderTarget_exposer.def( 
                "setArea"
                , setArea_function_type(&::CEGUI::OpenGLRenderTarget::setArea)
                , default_setArea_function_type(&OpenGLRenderTarget_wrapper::default_setArea)
                , ( bp::arg("area") ) );
        
        }
        { //::CEGUI::OpenGLRenderTarget::unprojectPoint
        
            typedef void ( ::CEGUI::OpenGLRenderTarget::*unprojectPoint_function_type )( ::CEGUI::GeometryBuffer const &,::CEGUI::Vector2f const &,::CEGUI::Vector2f & ) const;
            typedef void ( OpenGLRenderTarget_wrapper::*default_unprojectPoint_function_type )( ::CEGUI::GeometryBuffer const &,::CEGUI::Vector2f const &,::CEGUI::Vector2f & ) const;
            
            OpenGLRenderTarget_exposer.def( 
                "unprojectPoint"
                , unprojectPoint_function_type(&::CEGUI::OpenGLRenderTarget::unprojectPoint)
                , default_unprojectPoint_function_type(&OpenGLRenderTarget_wrapper::default_unprojectPoint)
                , ( bp::arg("buff"), bp::arg("p_in"), bp::arg("p_out") ) );
        
        }
        { //::CEGUI::OpenGLRenderTarget::updateMatrix
        
            typedef void ( OpenGLRenderTarget_wrapper::*updateMatrix_function_type )(  ) const;
            
            OpenGLRenderTarget_exposer.def( 
                "updateMatrix"
                , updateMatrix_function_type( &OpenGLRenderTarget_wrapper::default_updateMatrix )
                , "! helper that initialises the cached matrix\n" );
        
        }
    }

}
